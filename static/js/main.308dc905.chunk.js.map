{"version":3,"sources":["images/LoginScreenLogo.png","components/CheckoutForm/index.js","components/CardSection/index.js","components/MainCheckOut/index.js","components/oauth/index.js","components/history.js","components/router/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","CardSection","CheckoutForm","state","processing","Component","stripePromise","loadStripe","MainCheckOut","price","connectedAccountId","style","width","height","stripe","this","Oauth","Processing","code","url","props","location","search","params","queryString","parse","console","log","setState","setTimeout","Fragment","className","padding","justifyContent","alignItems","backgroundColor","borderRadius","display","color","fontSize","marginTop","disabled","createBrowserHistory","MyRoutes","history","exact","path","render","component","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAAAA,EAAOC,QAAU,IAA0B,6C,sKCM9BC,EAAQ,ICqCNC,IDsFAC,E,4MAzHZC,MAAQ,CACPC,YAAY,G,+DAFWC,a,QEHrBC,EAAgBC,YAAW,8CAsBlBC,E,4MApBXL,MAAQ,CACJM,MAAO,GACPC,mBAAoB,I,oGAOpB,OACG,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SACnC,kBAAC,WAAD,CAAUC,OAAQR,GACb,kBAAC,EAAD,CAAcG,MAAOM,KAAKZ,MAAMM,c,GAbtBJ,a,iBC0DZW,G,kNA3DXb,MAAQ,CACJc,YAAY,EACZC,KAAM,GACNf,MAAO,I,kEAES,IAAD,OAEXgB,EAAMJ,KAAKK,MAAMC,SAASC,OAC1BC,EAASC,IAAYC,MAAMN,GAC/BO,QAAQC,IAAIJ,GACZR,KAAKa,SAAS,CAAEV,KAAMK,EAAOL,KAAMf,MAAOoB,EAAOpB,QACjD0B,YAAW,WACP,EAAKD,SAAS,CAAEX,YAAY,MAC7B,O,+BAGH,OACI,kBAAC,IAAMa,SAAP,KACI,yBAAKC,UAAY,YACb,yBAAKpB,MAAO,CAAEqB,QAAS,OAAQnB,OAAQ,OAAQoB,eAAgB,SAAUC,WAAW,SAAUC,gBAAiB,aAAcC,aAAc,SACvI,yBAAKzB,MAAO,CAAC0B,QAAS,OAASJ,eAAgB,SAAUC,WAAY,WACjE,0BAAMvB,MAAO,CAAC2B,MAAO,OAAQC,SAAU,SAAvC,uCAGJ,yBAAK5B,MAAO,CAAC0B,QAAS,OAASJ,eAAgB,SAAUC,WAAY,WACjE,wBAAIvB,MAAO,IAAX,uCAGJ,yBAAKA,MAAO,CAAC0B,QAAS,OAASJ,eAAgB,SAAUC,WAAY,WACjE,wBAAIvB,MAAO,IAAX,oCAIJ,yBAAKA,MAAO,CAAC0B,QAAS,OAASJ,eAAgB,SAAUC,WAAY,SAASrB,OAAQ,QAClF,sCAAaE,KAAKZ,MAAMe,KAAxB,MAEJ,yBAAKP,MAAO,CAAC0B,QAAS,OAASJ,eAAgB,SAAUC,WAAY,SAAUrB,OAAQ,QACnF,uCAAaE,KAAKZ,MAAMA,MAAxB,OAMJY,KAAKZ,MAAMc,WACX,yBAAKN,MAAO,CAAE0B,QAAS,OAASJ,eAAgB,SAAUO,UAAW,SACjE,4BAAQT,UAAY,aAAgBU,UAAU,GAA9C,oBAGJ,yBAAK9B,MAAO,CAAE0B,QAAS,OAASJ,eAAgB,SAAUO,UAAW,SACjE,4BAAQT,UAAY,cAApB,qB,GAlDR1B,c,OCFLqC,gBC4BAC,E,4MAvBbxC,MAAQ,CACJM,MAAO,I,uDAIT,OACE,kBAAC,IAAMqB,SAAP,KACE,kBAAC,IAAD,CAAQc,QAASA,GAEb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,iBAAkBC,OAAQ,SAAC3B,GAAD,OAAW,kBAAC,EAAUA,MAClE,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIE,UAAWxC,U,GAXtBH,aCmBR4C,E,4MAjBb9C,MAAM,CACJM,MAAO,I,uDAIP,OACE,kBAAC,IAAMqB,SAAP,KACE,kBAAC,EAAD,W,GARUzB,aCME6C,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.308dc905.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LoginScreenLogo.dc7fb855.png\";","import React,{Component} from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\n\r\nimport CardSection from '../CardSection';\r\nimport axios from \"axios\";\r\nimport './chatForm.css';\r\nconst logo = require('../../images/LoginScreenLogo.png');\r\nclass CheckoutForm extends Component {\r\n   state = {\r\n    processing: false\r\n   }\r\n  // handleSubmit = async (event) => {\r\n  //   this.setState({ processing: true });\r\n  //   console.log( \"check# 1\" );\r\n  //   // We don't want to let default form submission happen here,\r\n  //   // which would refresh the page.\r\n  //   event.preventDefault();\r\n\r\n  //   const {stripe, elements, price } = this.props\r\n  //   console.log( \"check# 2\");\r\n\r\n  //   if (!stripe || !elements || !price) {\r\n  //       console.log( \"check # 2 'error\" )\r\n  //     // Stripe.js has not yet loaded.\r\n  //     // Make  sure to disable form submission until Stripe.js has loaded.\r\n  //     return;\r\n  //   }\r\n\r\n  //   axios.post( \"https://stripserver.herokuapp.com/api/create-intent\", {\r\n  //       amount: price * 100\r\n  //   } )\r\n  //   .then( async res => {\r\n  //       console.log( \"check# 3\" );\r\n  //       console.log( res.data.client_secret ) ;\r\n  //       console.log( \"res.data.client_secret\" );\r\n  //       this.setState({ processing: false });\r\n  //       const cardElement = elements.getElement(CardElement);\r\n  //       const paymentMethodRequest = await stripe.createPaymentMethod({\r\n  //           type: \"card\",\r\n  //           card: cardElement,\r\n         \r\n  //       })\r\n  //       console.log( \"check# 4\" );\r\n  //       const confirmCardPayment = await stripe.confirmCardPayment(res.data.client_secret, {\r\n  //           payment_method : paymentMethodRequest.paymentMethod.id\r\n  //       })\r\n  //       console.log( \"check# 5\" );\r\n\r\n  //       console.log( confirmCardPayment );\r\n  //       this.setState({ processing: false });\r\n  //       console.log( \"check# 6\" );\r\n  //       // const result = await stripe.confirmCardPayment('sk_test_mShogpf5eieu4fSmzYzmyrCD00nQhZ40n3', {\r\n  //       //   payment_method: {\r\n  //       //     card: elements.getElement(CardElement),\r\n  //       //     billing_details: {\r\n  //       //       name: 'Jenny Rosen',\r\n  //       //     },\r\n            \r\n  //       //   }\r\n  //       // });\r\n\r\n  //       // if (result.error) {\r\n  //       //   // Show error to your customer (e.g., insufficient funds)\r\n  //       //   console.log(result.error.message);\r\n  //       // } else {\r\n  //       //   // The payment has been processed!\r\n  //       //   if (result.paymentIntent.status === 'succeeded') {\r\n  //       //       console.log( result.paymentIntent );\r\n  //       //       console.log( \"Payemnt is Succedded\" );\r\n  //       //     // Show a success message to your customer\r\n  //       //     // There's a risk of the customer closing the window before callback\r\n  //       //     // execution. Set up a webhook or plugin to listen for the\r\n  //       //     // payment_intent.succeeded event that handles any business critical\r\n  //       //     // post-payment actions.\r\n  //       //   }\r\n  //       // }\r\n\r\n  //   }).catch( err => {\r\n  //       console.log( err );\r\n  //       console.log( \"error\" );\r\n  //   })\r\n\r\n    \r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      //  <div>\r\n      //     Hello WORLD\r\n      //     <button>Pay Now </button>\r\n      //   </div>\r\n      <div >\r\n        <form>\r\n          <button type=\"submit\"> Pay Now   </button>\r\n        </form>\r\n      </div>\r\n      //     <div className=\"centered\">\r\n      //        <div style={{ display: \"flex\" , justifyContent: \"center\"}} >\r\n      //           <button className={ \"pay-button\" }  disabled={!this.props.stripe} >Pay Now </button>\r\n      //         </div>\r\n                            \r\n      //          <div style={{ width: \"100vh\",height: \"80vh\" ,display: \"flex\" , justifyContent: \"center\", alignItems:\"center\", backgroundColor: \"whitesmoke\", borderRadius: \"10px\"}} >\r\n                 \r\n      //               <form onSubmit={this.handleSubmit}>\r\n      //                   <div style={{ display: \"flex\" , justifyContent: \"center\"}} >\r\n                            \r\n      //                       <img style={{height: \"150px\", width: \"150px\"}}  src={logo} alt=\"Smiley face\"/>\r\n                          \r\n      //                   </div>\r\n      //                   {\r\n      //                       this.state.processing ?\r\n      //                       <div style={{ display: \"flex\" , justifyContent: \"center\"}} >\r\n\r\n      //                       <button disabled={true} className={ \"pay-button\" } > Processing... </button>\r\n      //                       </div>\r\n                            \r\n      //                       :\r\n      //                       <div style={{ display: \"flex\" , justifyContent: \"center\"}} >\r\n      //                           <button className={ \"pay-button\" }  disabled={!this.props.stripe} >Pay Now </button>\r\n      //                       </div>\r\n                            \r\n      //                   }\r\n      //               </form>\r\n      //       </div>    \r\n      //  </div>\r\n    \r\n     );\r\n  }\r\n}\r\nexport default CheckoutForm\r\n\r\n// export default function InjectedCheckoutForm( props ) {\r\n//   return (\r\n//     <ElementsConsumer>\r\n//       {({stripe, elements }) => (\r\n       \r\n//         <CheckoutForm stripe={stripe} elements={elements} price={props.price} />\r\n//       )}\r\n//     </ElementsConsumer>\r\n//   );\r\n// }\r\n\r\n                        {/* <CardSection /> */}\r\n\r\n","/**\r\n* Use the CSS tab above to style your Element's container.\r\n*/\r\nimport React from 'react';\r\nimport {CardElement} from '@stripe/react-stripe-js';\r\nimport './CardSectionStyles.css'\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    \r\n    base: {\r\n      color: \"#32325d\",      \r\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n      fontSmoothing: \"antialiased\",\r\n      fontSize: \"20px\",\r\n      \"::placeholder\": {\r\n        color: \"#aab7c4\",\r\n      },\r\n    \r\n    },\r\n    invalid: {\r\n    \r\n      color: \"#fa755a\",\r\n      iconColor: \"#fa755a\",\r\n    },\r\n  },\r\n};\r\n\r\nfunction CardSection() {\r\n  return (\r\n    <div style={{width: \"100vh\", height: \"20vh\", alignItems: \"center\", justifyContent:\"center\"}} >\r\n        <div style={{ display: \"flex\" , justifyContent: \"center\", height: \"5vh\"}} >\r\n          <span style={{fontSize: \"20px\", color: \"grey\"}} >Fill Card Details To Proceed </span>  \r\n        </div>\r\n        <div style={{ display: \"flex\" ,alignContent: \"center\", width: \"100vh\", height: \"5vh\",justifyContent: \"center\"}} >\r\n          <div style={{ display: \"flex\" ,alignContent: \"center\", width: \"90vh\", justifyContent: \"center\"}} >\r\n            <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardSection;\r\n","import React, { Component } from 'react';\r\nimport {Elements} from '@stripe/react-stripe-js';\r\nimport CheckoutForm from '../CheckoutForm';\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nconst stripePromise = loadStripe(\"pk_test_2Qxo3JNFdwPvQ0UbamibC4g200HHZIUZXs\");\r\nclass MainCheckOut extends Component {\r\n    state = { \r\n        price: 15,\r\n        connectedAccountId: \"\"\r\n     }\r\n    componentDidMount(){\r\n        // this.setState({ price:this.props.match.params.amount, connectedAccountId:this.props.match.params.connectedAccountId })\r\n        // console.log(this.props.match.params)\r\n    }\r\n    render() { \r\n        return ( \r\n           <div style={{width: \"100%\", height: \"100%\"}}>\r\n            <Elements stripe={stripePromise} >\r\n                 <CheckoutForm price={this.state.price} />\r\n             </Elements>\r\n           </div>\r\n         );\r\n    }\r\n}\r\n \r\n \r\nexport default MainCheckOut;","import React, { Component } from 'react';\r\nimport queryString from 'query-string';\r\nimport \"./style.css\";\r\nclass Oauth extends Component {\r\n    state = { \r\n        Processing: true,\r\n        code: \"\",\r\n        state: \"\",\r\n     }\r\n    componentDidMount(){\r\n        \r\n        let url = this.props.location.search;\r\n        let params = queryString.parse(url);\r\n        console.log(params);\r\n        this.setState({ code: params.code, state: params.state })\r\n        setTimeout(() => {\r\n            this.setState({ Processing: false })\r\n        }, 3000);\r\n    }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <div className={ \"centered\" } >\r\n                    <div style={{ padding: \"30px\" ,height: \"55vh\", justifyContent: \"center\", alignItems:\"center\", backgroundColor: \"whitesmoke\", borderRadius: \"10px\"}} >\r\n                        <div style={{display: \"flex\" , justifyContent: \"center\", alignItems: \"center\"}} >\r\n                            <span style={{color: \"grey\", fontSize: \"20px\"}} > Ace In Hole Account Connectivity </span>\r\n                        </div>\r\n\r\n                        <div style={{display: \"flex\" , justifyContent: \"center\", alignItems: \"center\"}} >\r\n                            <h1 style={{ }} > Your Are connected Successfully! </h1>\r\n                        </div>\r\n\r\n                        <div style={{display: \"flex\" , justifyContent: \"center\", alignItems: \"center\"}} >\r\n                            <h3 style={{ }} > Making Final Changes For You! </h3>\r\n                            \r\n                        </div>\r\n\r\n                        <div style={{display: \"flex\" , justifyContent: \"center\", alignItems: \"center\",height: \"4vh\"}} >\r\n                            <h3> Code: { this.state.code } </h3>\r\n                        </div>\r\n                        <div style={{display: \"flex\" , justifyContent: \"center\", alignItems: \"center\", height: \"4vh\"}} >\r\n                            <h3> State: {this.state.state}  </h3>\r\n                        </div>\r\n\r\n                        \r\n\r\n                    {\r\n                        this.state.Processing ?\r\n                        <div style={{ display: \"flex\" , justifyContent: \"center\", marginTop: \"30px\"}} >\r\n                            <button className={ \"pay-button\" }  disabled={true} > Processing... </button>\r\n                        </div>\r\n                        :\r\n                        <div style={{ display: \"flex\" , justifyContent: \"center\", marginTop: \"30px\"}} >\r\n                            <button className={ \"pay-button\" } > Go Back </button>\r\n                        </div>\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Oauth;","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","import React, { Component } from 'react';\r\nimport { Route, Router, Switch} from 'react-router-dom';\r\nimport MainCheckOut from '../MainCheckOut';\r\nimport OAuth from \"../oauth\";\r\nimport history from \"../history\";\r\nclass MyRoutes extends Component {\r\n  state = { \r\n      price: 15 \r\n   }\r\n \r\n  render() { \r\n    return ( \r\n      <React.Fragment>\r\n        <Router history={history} >\r\n           {/* <Switch> */}\r\n            <Route exact path=\"/connect/oauth\"  render={(props) => <OAuth {...props} />} />\r\n            <Route exact path=\"/\" component={MainCheckOut} />\r\n           \r\n            {/* </Switch> */}\r\n          </Router> \r\n      </React.Fragment>\r\n            // path=\"/:amount?/:connectedAccountId?\" component={MainCheckOut} />\r\n\r\n            // /* <Route exact path=\"/:email?/:amount?/:orderId?\" component={MainCheckOut} /> */}\r\n        \r\n     );\r\n  }\r\n}\r\n \r\nexport default MyRoutes;\r\n// function App() {\r\n//   return (\r\n    \r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","import React, { Component } from 'react';\nimport MyRoutes from \"./components/router\";\nimport { Elements } from '@stripe/react-stripe-js';\nimport CheckoutForm from './components/CheckoutForm'\n// const stripePromise = loadStripe(\"pk_test_2Qxo3JNFdwPvQ0UbamibC4g200HHZIUZXs\");\n\nclass App extends Component {\n  state={\n    price: 15\n  }\n \n  render() { \n    return ( \n      <React.Fragment>\n        <MyRoutes />\n\n            {/* <Elements stripe={stripePromise} >\n                 <CheckoutForm price={this.state.price} />\n             </Elements> */}\n      </React.Fragment>\n     );\n  }\n}\n \nexport default App;\n// function App() {\n//   return (\n    \n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}